trigger:
  batch: true
  branches:
    include:
    - master
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Tests/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/mac-test-netcore-devices.yaml'
    - 'Resources/CI/Templates/stage-build-native-libs.yaml'
    - 'Resources/CI/Templates/step-create-ports-macos.yaml'
    - 'Resources/CI/Templates/step-copy-native-libraries-near-csproj.yaml'
    - 'Resources/CI/Templates/step-collect-logs.yaml'
    - 'Resources/Native/*'
    - 'Resources/Utilities/CreateLoopbackPort_macOS/*'

pr:
  branches:
    include:
    - develop
  paths:
    include:
    - 'DryWetMidi/*'
    - 'DryWetMidi.Tests/*'
    - 'DryWetMidi.Tests.Common/*'
    - 'Resources/CI/mac-test-netcore-devices.yaml'
    - 'Resources/CI/Templates/stage-build-native-libs.yaml'
    - 'Resources/CI/Templates/step-create-ports-macos.yaml'
    - 'Resources/CI/Templates/step-copy-native-libraries-near-csproj.yaml'
    - 'Resources/CI/Templates/step-collect-logs.yaml'
    - 'Resources/Native/*'
    - 'Resources/Utilities/CreateLoopbackPort_macOS/*'

pool:
  vmImage: 'macOS-latest'

variables:
- group: DryWetMIDI-Common-Variables
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'

name: macOS_Test_NetCore_Devices_$(LibraryVersion)$(Rev:.r)

stages:
- template: Templates/stage-build-native-libs.yaml

- stage: RunTests
  displayName: Run tests
  pool:
    vmImage: 'macOS-latest'
  jobs:
  - job: RunTests
    displayName: Run tests
    steps:
    - template: Templates/step-copy-native-libraries-near-csproj.yaml
    
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1'
      inputs:
        packageType: sdk
        version: '3.1.410'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: Build DryWetMidi and DryWetMidi.Tests.Common
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration) --framework netstandard2.0'
        projects: |
          DryWetMidi/Melanchall.DryWetMidi.csproj
          DryWetMidi.Tests.Common/Melanchall.DryWetMidi.Tests.Common.csproj
    
    - task: DotNetCoreCLI@2
      displayName: Build DryWetMidi.Tests
      inputs:
        command: 'build'
        arguments: '--configuration $(buildConfiguration) --framework netcoreapp3.1'
        projects: |
          DryWetMidi.Tests/Melanchall.DryWetMidi.Tests.csproj
    
    - task: PowerShell@2
      displayName: Build test data sending utility
      inputs:
        targetType: 'inline'
        script: |
          cd DryWetMidi.Tests
          gcc -c SendTestData.c
          gcc -shared -framework CoreServices -framework CoreMIDI -framework CoreFoundation -o SendTestData.dylib SendTestData.o
          Copy-Item -Path "SendTestData.dylib" -Destination "bin/$(buildConfiguration)/netcoreapp3.1" -Recurse
          
    - task: PublishPipelineArtifact@1
      displayName: Publish 'SendTestData' artifact
      inputs:
        targetPath: 'DryWetMidi.Tests/SendTestData.dylib'
        artifactName: 'SendTestData'
        artifactType: pipeline
    
    - template: Templates/step-create-ports-macos.yaml
      parameters:
        enabled: 'true'
    
    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      continueOnError: false
      inputs:
        command: 'test'
        projects: 'DryWetMidi.Tests/Melanchall.DryWetMidi.Tests.csproj'
        arguments: '--blame --no-build --configuration $(buildConfiguration) --filter (FullyQualifiedName~.Devices) --framework netcoreapp3.1 --verbosity normal -d diagnostic.log'
        
    - task: PowerShell@2
      displayName: Collect diagnostic reports
      condition: failed()
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking if diagnostic reports created..."
          Start-Sleep -s 10
          
          $path = "$HOME/Library/Logs/DiagnosticReports"
          
          if (Test-Path -Path "$path")
          {
            Write-Host "There are diagnostic reports, copying..."
            Copy-Item -Path "$path" -Destination "$(Pipeline.Workspace)" -Recurse
            Write-Host "##vso[task.setvariable variable=DiagnosticReportsFound]true"
          }
          else
          {
            Write-Host "There are no diagnostic reports found."
            Write-Host "##vso[task.setvariable variable=DiagnosticReportsFound]false"
          }
          
    - task: PublishPipelineArtifact@1
      displayName: Publish 'DiagnosticReports' artifact
      condition: eq(variables['DiagnosticReportsFound'], true)
      inputs:
        targetPath: '$(Pipeline.Workspace)/DiagnosticReports'
        artifactName: 'DiagnosticReports'
        artifactType: pipeline
        
    - template: Templates/step-collect-logs.yaml
